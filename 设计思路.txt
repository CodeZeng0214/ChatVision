3.17日待实现：
    1.关于导入外部插件
    2.关于展示结果
    3.关于视频流的处理
    4.关于插件配置交互界面现在并未正确的初始化的问题


设计思路：

【系统概述】
我正在制作一个基于大语言模型能够完成图像识别类任务的聊天机器人。
效果是，用户给聊天机器人发送信息，聊天机器人给予合适的回复，
比如用户发送了一张有三个人的图片，问题内容是，图片上有几个人，那么聊天机器人会调用合适的图像处理模块，处理图片后给用户用自然语言返回合适的答案：有三个人；
再比如说用户发送了一张有人和狗狗在玩耍的图片，问聊天机器人图片上描述了什么，那么聊天机器人就会调用集成的图像描述模块，处理图片后给用户用自然语言返回合适的答案：有一个人在和狗狗玩耍；
再比如说用户要求对电脑上指定文件夹内的图片进行识别，识别特定的物体（比如汽车），那么聊天机器人会调用合适的图像识别模块，模块识别完将识别结果存储在文件夹里，聊天机器人会回答：您要求的图像识别类任务已经处理完毕，任务结果在/A/A文件夹

【聊天实现】
聊天机器人的聊天功能实现是通过调用现今常见的大语言模型的api实现一个基本的对话，要有上下文记忆功能。
比如ChatGPT（目前的api密钥及网站如下
BASE_URL = "https://api.chatanywhere.tech/v1" # 默认语义大模型网站
API_KEY = "sk-AencKA6Oy7WnhukWgquDlbis89fhQ5q4Nz8ba4BvYJUjy8LR" # 默认网站密钥
GPT_MODEL = 'gpt-4o-mini' # 默认GPT模型）
聊天api的调用不必使用外部的包（比如langchain）

【技术思路】
如果只调用ChaGPT的api聊天是不能完成复杂的图像识别任务的。
所以我的构想是借助插件式的图像处理类任务模块，比如，常见的YOLO图像识别、姿态估计、以及个人创建的BLIP图像描述模块等等模块，以及能够描述图像内容的BLIP模块，我的设想是这些模块作为聊天机器人能够完成的任务附加在聊天机器人上，在用户输入内容时，聊天机器人会理解用户的意图，选择合适的任务模块执行，获取图像处理类任务的结果，然后再整理用户需要的信息，用自然的语言回答用户。

【界面设计】
聊天界面的具体要求：
基于QtPyside6实现一个类似于微信聊天的对话界面。
主体是上部的聊天窗口，用于显示聊天内容；以及下部的输入框，用于用户输入内容。用户和对方的消息分布在聊天窗口两侧，每条聊天内容由名称和文本框构成，注意这个文本框可以含图片；
下部含一个聊天输入框和发送按钮，用于用户输入聊天内容并发送。另外还要有一个选择图片或者视频文件的地方，用户输入好聊天内容，选择好要发送的图片之后（可以不选文件直接发送），按下发送按钮即可发送一条聊天信息
实际的聊天过程中，当用户发送信息时，会发送到聊天窗口内（位于右侧），如果用户是选择好图片发送的，那发送的时候会将图片和输入框里的内容合并为一个聊天信息发送出去。
如果用户发送了视频，视频在聊天窗口内不会立即播放，不过会在聊天窗口内的消息处显示为静态图片，用户点击就可以播放。
聊天界面还应该支持聊天记录以及新开一个聊天这些功能


【侧边栏设计】
还应该有一个右侧边栏（位于主窗口外部），聊天栏的大部分用于展示识别前后的结果。
这里首先不仅能展示处理前后的图片、视频，还能够展示实时的视频流，比如摄像头。
另外，在默认情况下，侧边栏应该是隐藏的，点击一个右上角的可以弹出右侧的侧边栏。
聊天机器人也可以根据用户图像处理时发送的任务意图开启侧边栏，比如实时的视频处理，就要自动弹出侧边栏

【插件管理】
除了聊天界面以及右侧的侧边栏，还应该有一个管理任务模块插件的管理器界面，
插件设置界面应和聊天界面是一级的，点击上部栏内的聊天和插件按钮可以切换当前界面。
这个管理器能够开关聊天机器人能够执行的任务，并且对每个任务的详细参数进行设置，比如YOLO任务模块的默认模型，默认结果保存目录等等参数。
同时，后期的插件管理界面支持从外部导入插件模块。

【参数交互】
不过这时遇到了一个阻碍，就是有时候用户输入任务后，AI理解了用户想要进行的任务类型，但是用户的任务参数表达不完整或者错误，应该让聊天机器人主动引导用户补充参数，
聊天栏的某个部分就作为用户补充参数的地方，
在AI理解用户任务目标以及任务参数不完整的情况下，这个补充参数的部分会自动切换为相应任务模块需要补充的参数，以及可选的参数
比如用户是图像识别类任务，但没有输入图片，那在参数补充的部分应该及时浮现一个实时的图片选择按钮（必选），以及结果保存的位置（可选）
再比如聊天机器人附加了一个能够对摄像头实时处理的模块，用户输入了摄像头处理的任务目标，但没有指定实时处理哪个摄像头，那么该部分应该出现对应的摄像头信息输入或者选择按钮。

【聊天实现的比较重要的问题】
现在存在的一个比较严重的问题是，调用api的语言大模型生成回复是一个耗时的过程，
然而现在的发送逻辑是，点击发送按钮，会把消息发送给ChatFrame函数进行处理，
这个过程会导致qt界面的卡顿，应该另起一个线程进行消息的生成回复，先用最基础的Thread实现它